from fastapi import APIRouter, HTTPException
from app.models.querying import QueryRequest, QueryResponse
from app.services.vector_db_crud import query_similar_embeddings
from app.llms.openai_llm import summarize_doc
from app.services.db_crud import get_chat_history
from app.services.text_embedding import text_to_tokens, tokens_to_text


docu_query_router = APIRouter()


@docu_query_router.post("/query")
def query_document(query_request: QueryRequest) -> QueryResponse:
    """
        Queries a document based on the provided document UUID and query.

        Args:
            query_request (QueryRequest): A Pydantic model containing the document UUID and query.

        Returns:
            QueryResponse: A Pydantic model containing the response generated by the OpenAI model.
    """
    try:
        # Convert query embedding to text
        query_embedding = text_to_tokens(query_request.query)
        similar_embeddings = query_similar_embeddings(query_embedding)
        document_content = tokens_to_text(similar_embeddings)
        chat_history = get_chat_history(query_request.doc_uuid)
        response = summarize_doc(query_request.doc_uuid, document_content, query_request.query, chat_history)
        return QueryResponse(response=response)
    except Exception as e:
        raise HTTPException(status_code=400, detail="Error querying document") from e